import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation
import numpy as np
import random

def is_prime(num):
    if num <= 1:
        return False
    if num <= 3:
        return True
    if num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

def generate_numbers(length):
    return [random.randint(3, 9) for _ in range(length)]

def generate_random_indices(length):
    return [random.randint(0, length - 1) for _ in range(length)]

def filter_primes(numbers):
    return [num for num in numbers if is_prime(num)]

def generate_new_numbers(length):
    return [random.randint(0, length - 1) for _ in range(length)]

def find_primes_in_generation():
    numbers = generate_numbers(10000)
    return filter_primes(numbers)

# Function to generate random points on the surface of a sphere
def generate_random_points(num_points):
    phi = 2 * np.pi * np.random.rand(num_points)
    theta = np.arccos(2 * np.random.rand(num_points) - 1)

    x = 10 * np.sin(theta) * np.cos(phi)
    y = 10 * np.sin(theta) * np.sin(phi)
    z = 10 * np.cos(theta)

    return x, y, z

# Create a figure and a 3D axis
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Create a sphere
u = np.linspace(0, 2 * np.pi, 100)
v = np.linspace(0, np.pi, 100)
x_sphere = 10 * np.outer(np.cos(u), np.sin(v))
y_sphere = 10 * np.outer(np.sin(u), np.sin(v))
z_sphere = 10 * np.outer(np.ones(np.size(u)), np.cos(v))

# Plot the sphere
sphere = ax.plot_surface(x_sphere, y_sphere, z_sphere, color='b', alpha=0.5)

# Generate initial random points on the sphere
primes = find_primes_in_generation()
num_points = len(primes)
x_points, y_points, z_points = generate_random_points(num_points)
points = ax.scatter(x_points, y_points, z_points, c='red', s=20, label='Random Points')

# Set axis labels
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

# Hide axes
ax.axis('off')

# Counter for completed revolutions
revolutions = 0

# Function to update the plot for each frame
def update(frame):
    global revolutions

    angle = frame % 360
    ax.view_init(30, angle)  # Set the viewing angle for rotation

    # Check if a full revolution is completed
    if angle == 0:
        revolutions += 1
        # Change the number of points for every successful revolution
        primes = find_primes_in_generation()
        num_points = len(primes)
        # Regenerate random points with the new number of points
        x_points, y_points, z_points = generate_random_points(num_points)
        points._offsets3d = (x_points, y_points, z_points)
        color = np.random.rand(3,)
        points.set_array(np.zeros(num_points))  # Set dummy array to trigger color update
        points.set_color(color)

    return sphere, points

# Create an animation
animation = FuncAnimation(fig, update, frames=np.arange(0, 360 * 2, 1), interval=1)

# Show the plot
plt.show()
